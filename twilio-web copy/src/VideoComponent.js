import React, { Component } from 'react';
import Video from 'twilio-video';
import axios from 'axios';
 
export default class VideoComponent extends Component {
 constructor(props) {
   super();
   this.state = {
        identity: '',  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
        roomName: '',	   /* Will store the room name */
        roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
        previewTracks: null,
        localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
        hasJoinedRoom: false,
        activeRoom: null ,// Track the current active room
        token: null
    };
 }

 generateToken = () => {
    axios.get('http://52.172.45.185:9000/api/values/' + this.state.identity, {
        method: 'GET',
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json'
        }
    }).then(result => {
      this.setState({ token: result.data });
    }).catch(err => {
        console.log(err);
    });
  }

  joinRoom = () => {
      console.log("Joining Room " + this.state.roomName + " ...");
      let connectOptions = {
          name: this.state.roomName
      };

      if (this.state.previewTracks) {
        connectOptions.tracks = this.state.previewTracks;
      }

      Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
          alert('Could not connect to Twilio: ' + error.message);
      });
  }

  // Attach the Tracks to the DOM.
attachTracks(tracks, container) {
    tracks.forEach(track => {
      container.appendChild(track.attach());
    });
  }
  
  // Attach the Participant's Tracks to the DOM.
  attachParticipantTracks(participant, container) {
    var tracks = Array.from(participant.tracks.values());
    this.attachTracks(tracks, container);
  }

  roomJoined = (room) => {
      console.log("Joined as " + this.state.identity);
      this.setState({
          activeRoom: room,
          localMediaAvailable: true,
          hasJoinedRoom: true
      });

      var previewContainer = this.refs.localMedia;
      if(!previewContainer.querySelector('video')) {
          this.attachParticipantTracks(room.localParticipant, previewContainer);
      }

      // Attach the Tracks of the room's participants.
    room.participants.forEach(participant => {
        console.log("Already in Room: '" + participant.identity + "'");
        var previewContainer = this.refs.remoteMedia;
        this.attachParticipantTracks(participant, previewContainer);
      });
  
      // Participant joining room
      room.on('participantConnected', participant => {
        console.log("Joining: '" + participant.identity + "'");
      });
  
      // Attach participant’s tracks to DOM when they add a track
      room.on('trackAdded', (track, participant) => {
        console.log(participant.identity + ' added track: ' + track.kind);
        var previewContainer = this.refs.remoteMedia;
        this.attachTracks([track], previewContainer);
      });
  
      // Detach participant’s track from DOM when they remove a track.
      room.on('trackRemoved', (track, participant) => {
        console.log(participant.identity + ' removed track: ' + track.kind);
        this.detachTracks([track]);
      });
  
      // Detach all participant’s track when they leave a room.
      room.on('participantDisconnected', participant => {
        console.log("Participant '" + participant.identity + "' left the room");
        this.detachParticipantTracks(participant);
      });
  
      // Once the local participant leaves the room, detach the Tracks
      // of all other participants, including that of the LocalParticipant.
      room.on('disconnected', () => {
        console.log("Participant '" + this.state.identity + "' left the room");
        if (this.state.previewTracks) {
          this.state.previewTracks.forEach(track => {
            track.stop();
          });
        }
        this.detachParticipantTracks(room.localParticipant);
        room.participants.forEach(this.detachParticipantTracks);
        this.state.activeRoom = null;
        this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
      }); 
  }

  leaveRoom = () => {
      this.state.activeRoom.disconnect();
      this.setState({
          hasJoinedRoom: false,
          localMediaAvailable: false
      });
  }

  detachTracks = (tracks) => {
    let isSafari = /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);
    tracks.forEach(track => {
      if (isSafari) {
        // Avoid detaching the track and only remove the DOM element for Safari.
        // This avoids the issue that happens because of https://github.com/twilio/twilio-video.js/issues/294
        // We are still uncertain about what side effects this problem ultimately has if particants
        // connect and reconnect multiple times.
        track._attachments.forEach(function(element) {
          element.remove();
        });
      } else {
        track.detach().forEach(detachedElement => {
          detachedElement.remove();
        });
      }
    });
  }
    
    detachParticipantTracks = (participant) => {
      var tracks = Array.from(participant.tracks.values());
      this.detachTracks(tracks);
    }
 
 render() {
   return (
     <div>
         <h1>React Twilio Video</h1>
         UserName: <input type="text" value={this.state.identity} onChange={(e) => this.setState({identity: e.target.value})}/>
         RoomName: <input type="text" value={this.state.roomName} onChange={(e) => this.setState({roomName: e.target.value})}/>
         {this.state.token && <div>Token: <p>{this.state.token}</p></div>}
         {this.state.identity && this.state.roomName && <button onClick={this.generateToken}>Generate Token</button>}
         {!this.state.hasJoinedRoom && this.state.token && <button onClick={this.joinRoom}>Join Room</button>}
         {this.state.hasJoinedRoom && <button onClick={this.leaveRoom}>Leave Room</button>}
         {this.state.localMediaAvailable && <div ref="localMedia"></div>}
         <div ref="remoteMedia"></div>
     </div>
   );
 }
}